<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>

<#+
void GenerateSemanticType(string @namespace, string access, string name, string underlyingType, bool isValueType)
{
	var parentTemplateDir = Path.GetDirectoryName(Path.GetFullPath(Host.TemplateFile));
	// assume "SemanticTypes" is at the root of the solution
	
	var solutionDir = Path.GetDirectoryName(parentTemplateDir);
	string semanticTypesDir = null;

	while (true)
	{
		semanticTypesDir = Path.Combine(solutionDir, "SemanticTypes");
		if (Directory.Exists(semanticTypesDir)) break;
		var parentDir = Path.GetDirectoryName(solutionDir);
		if (parentDir == solutionDir) throw new ApplicationException("Could not find SemanticTypes directory");
		solutionDir = parentDir;
	}

	string path = Path.Combine(semanticTypesDir, "SemanticType.cs");

	string rawText = File.ReadAllText(path);
	string text = 
		rawText
			.Replace("public struct", access + " struct")
			.Replace("SemanticType<TTag, TValue>", name)
			.Replace("As<TTag,TValue>", "As" + name)
			.Replace("SemanticType", name)
			.Replace("TValue", underlyingType)
			.Replace("namespace " + name + "s", "namespace " + @namespace);

	if (isValueType) {
		text = text.Replace("Value != null ? Value.GetHashCode() : 0", "Value.GetHashCode()");
	}

	this.Write(text);
}
#>