<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>

<#+
void SemanticType(string access, Type wrappedType, string type)
{
    var wrappedTypeName = wrappedType.FullName;
    bool isComparable = typeof(IComparable).IsAssignableFrom(wrappedType);
#>
    <#=access#> partial struct <#=type#> : SemanticTypes.ISemanticType 
                                           , SemanticTypes.ISemanticType<<#=wrappedTypeName#>>
                                           , System.IEquatable<<#=type#>>
<#+ if(isComparable) {
#>                                           , System.IComparable
                                           , System.IComparable<<#=type#>>
<#+}#>											    
    {
        public <#=wrappedTypeName#> Value { get; }

        object SemanticTypes.ISemanticType.Value { get { return Value; } }

        public <#=type#>(<#=wrappedTypeName#> value)
        {
            Value = value;
        }

        public <#=type#>(<#=type#> other)
        {
            Value = other.Value;
        }

        public override int GetHashCode()
        {
<#+
if (wrappedType.IsValueType)
{#>
            return Value.GetHashCode();
<#+
}
else
{#>
            return Value != null ? Value.GetHashCode() : 0;
<#+
}#>
        }

        public override bool Equals(object obj)
        {
            if (obj is <#=type#>)
            {
                var other = (<#=type#>)obj;
                return Equals(Value, other.Value);
            }
            else
            {
                return false;
            }
        }

        public static bool operator ==(<#=type#> x, <#=type#> y)
        {
            return Equals(x.Value,y.Value);
        }

        public static bool operator !=(<#=type#> x, <#=type#> y)
        {
            return !Equals(x.Value, y.Value);
        }

        public override string ToString()
        {
<#+ if (!wrappedType.IsValueType) {#>
            if (Value == null) return "";
<#+}#>
            return Value.ToString();
        }

        public bool Equals(<#=type#> other)
        {
            return Value == other.Value;
        }
<#+ if (isComparable) {
#>

        public int CompareTo(object obj)
        {
<#+ if (!wrappedType.IsValueType) {#>
            if (Value == null) return obj == null ? 0 : -1;
<#+}#>
            if (obj is <#=type#>) return Value.CompareTo(((<#=type#>)obj).Value);
            return Value.CompareTo(obj);
        }

        public int CompareTo(<#=type#> other)
        {
<#+ if (!wrappedType.IsValueType) {#>
            if (Value == null) return other.Value == null ? 0 : -1;
<#+}#>
            return Value.CompareTo(other.Value);
        }
    }
<#+}#>

    public static partial class SemanticExtensions
    {
        public static <#=type#> As<#=type#>(this <#=wrappedTypeName#> value)
        {
            return new <#=type#>(value);
        }
    }
<#+
}
#>