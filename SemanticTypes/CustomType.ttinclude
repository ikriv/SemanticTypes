<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>

<#+
void GenerateSemanticType(string @namespace, string access, string name, string underlyingType, bool isValueType)
{
	var serviceProvider = this.Host as IServiceProvider;
	var dte = serviceProvider.GetService(typeof(DTE)) as DTE;
	var project = dte.Solution.Projects.Cast<Project>().First(p=>p.Name == "SemanticTypes");
	var projectPath = Path.GetDirectoryName(project.FullName);

	string path = Path.Combine(projectPath, "SemanticType.cs");
	string rawText = File.ReadAllText(path);
	string text = 
		rawText
			.Replace("public struct", access + " struct")
			.Replace("SemanticType<TTag, TValue>", name)
			.Replace("As<TTag,TValue>", "As" + name)
			.Replace("SemanticType", name)
			.Replace("TValue", underlyingType)
			.Replace("namespace " + name + "s", "namespace " + @namespace);

	if (isValueType) {
		text = text.Replace("Value != null ? Value.GetHashCode() : 0", "Value.GetHashCode()");
	}

	this.Write(text);
}
#>